ALTER TABLE [dbo].mp_Blogs ADD
	EndDate datetime NULL 
GO

ALTER TABLE [dbo].mp_Blogs ADD
	Approved bit DEFAULT 1 
GO

ALTER TABLE [dbo].mp_Blogs ADD
	ApprovedBy uniqueidentifier DEFAULT '00000000-0000-0000-0000-000000000000' 
GO

ALTER TABLE [dbo].mp_Blogs ADD
	ApprovedDate datetime DEFAULT getutcdate() 
GO

ALTER TABLE [dbo].mp_Blogs ADD
	SubTitle nvarchar(500) NULL 
GO


UPDATE [dbo].mp_Blogs SET ApprovedDate = CreatedDate
GO

ALTER PROCEDURE [dbo].[mp_Blog_Insert]

/*
Author:			Joe Audette
Last Modified:	2012-11-09

*/

@BlogGuid	uniqueidentifier,
@ModuleGuid	uniqueidentifier,
@ModuleID       		int,
@UserName       	nvarchar(100),
@Heading         		nvarchar(255),
@Abstract	    	nvarchar(max),
@Description    		nvarchar(max),
@Location    		nvarchar(max),
@StartDate      		datetime,
@IsInNewsletter 	bit,
@IncludeInFeed		bit,
@AllowCommentsForDays	int,
@UserGuid	uniqueidentifier,
@CreatedDate	datetime,
@ItemUrl	nvarchar(255),
@MetaKeywords	nvarchar(255),
@MetaDescription	nvarchar(255),
@CompiledMeta    		nvarchar(max),
@IsPublished			bit,
@SubTitle nvarchar(500),
@EndDate datetime,
@Approved bit,
@ApprovedBy uniqueidentifier,
@ApprovedDate datetime,
@ItemID         		int OUTPUT

AS

INSERT INTO 		mp_Blogs
(
			BlogGuid,
			ModuleGuid,
    			ModuleID,
    			CreatedByUser,
    			CreatedDate,
    			Heading,
    			Abstract,
			[Description],
			Location,
			StartDate,
			IsInNewsletter,
			IncludeInFeed,
			AllowCommentsForDays,
			UserGuid,
			LastModUserGuid,
			LastModUtc,
			ItemUrl,
			MetaKeywords,
			MetaDescription,
			CompiledMeta,
			IsPublished,
			SubTitle,
			EndDate,
			Approved,
			ApprovedBy,
			ApprovedDate
		
)

VALUES
(
			@BlogGuid,
			@ModuleGuid,
    		@ModuleID,
    		@UserName,
    		@CreatedDate,
    		@Heading,
    		@Abstract,
    		@Description,
			@Location,
    		@StartDate,
    		@IsInNewsletter,
		@IncludeInFeed,
			@AllowCommentsForDays,
			@UserGuid,
			@UserGuid,
			@CreatedDate,
			@ItemUrl,
			@MetaKeywords,
			@MetaDescription,
			@CompiledMeta,
			@IsPublished,
			@SubTitle,
			@EndDate,
			@Approved,
			@ApprovedBy,
			@ApprovedDate
    		
)

SELECT

    @ItemID = @@Identity


IF EXISTS(SELECT ModuleID FROM mp_BlogStats WHERE ModuleID = @ModuleID)
	BEGIN
		UPDATE mp_BlogStats
		SET 	EntryCount = EntryCount + 1
		WHERE ModuleID = @ModuleID

	END
ELSE
	BEGIN
		INSERT INTO mp_BlogStats(ModuleGuid, ModuleID, EntryCount)
		VALUES (@ModuleGuid, @ModuleID, 1)


	END


GO

ALTER PROCEDURE [dbo].[mp_Blog_Update]

/*
Author:			Joe Audette
Last Modified:		2012-11-09

*/

@ItemID         		int,
@ModuleID       		int,
@UserName       	nvarchar(100),
@Heading          		nvarchar(255),
@Abstract       		nvarchar(max),
@Description    		nvarchar(max),
@StartDate      		datetime,
@IsInNewsletter 	bit,
@IncludeInFeed		bit,
@AllowCommentsForDays	int,
@Location nvarchar(max),
@LastModUserGuid	uniqueidentifier,
@LastModUtc	datetime,
@ItemUrl	nvarchar(255),
@MetaKeywords	nvarchar(255),
@MetaDescription	nvarchar(255),
@CompiledMeta    		nvarchar(max),
@IsPublished			bit,
@SubTitle nvarchar(500),
@EndDate datetime,
@Approved bit,
@ApprovedBy uniqueidentifier,
@ApprovedDate datetime
  
AS

UPDATE mp_Blogs

SET 

		ModuleID = @ModuleID,
		CreatedByUser = @UserName,
		Heading =@Heading ,
		[Abstract] =@Abstract,
		[Description] = @Description,
		StartDate = @StartDate,
		IsInNewsletter = @IsInNewsletter,
		IncludeInFeed = @IncludeInFeed,
		AllowCommentsForDays = @AllowCommentsForDays,
		Location = @Location,
		LastModUserGuid = @LastModUserGuid,
		LastModUtc = @LastModUtc,
		ItemUrl = @ItemUrl,
		MetaKeywords = @MetaKeywords,
		MetaDescription = @MetaDescription,
		CompiledMeta = @CompiledMeta,
		IsPublished = @IsPublished,
		SubTitle = @SubTitle,
		EndDate = @EndDate,
		Approved = @Approved,
		ApprovedBy = @ApprovedBy,
		ApprovedDate = @ApprovedDate
		
WHERE 
		ItemID = @ItemID


GO

ALTER PROCEDURE [dbo].[mp_Blog_SelectPageByCategory]

/*
Author:			Joe Audette
Created:		2012-04-13
Last Modified:	2012-11-10

*/



@ModuleID 		int,
@CategoryID		int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int


AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]

WHERE 	ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentTime
		AND (EndDate IS NULL OR EndDate > @CurrentTime)
		AND ItemID IN (SELECT ItemID FROM mp_BlogItemCategories WHERE CategoryID = @CategoryID)


ORDER BY	 StartDate DESC

END

SELECT
		b.BlogGuid,
			b.ModuleGuid,
			b.ItemID, 
			b.ModuleID, 
			b.CreatedByUser, 
			b.CreatedDate, 
			b.Heading, 
			b.SubTitle,
			b.[Abstract], 
			b.[Description], 
			b.StartDate,
			b.IsInNewsletter, 
			b.IncludeInFeed,
			b.AllowCommentsForDays,
			b.MetaKeywords,
			b.MetaDescription,
			b.Location,
			b.UserGuid,
			b.LastModUserGuid,
			b.LastModUtc,
			b.ItemUrl,
			CONVERT(nvarchar(20), b.CommentCount) AS CommentCount,
			COALESCE(u.UserID, -1) AS UserID,
			u.[Name],
			u.FirstName,
			u.LastName,
			u.[LoginName],
			u.Email,
			u.AvatarUrl,
			u.AuthorBio
		
FROM
		[dbo].[mp_Blogs] b

JOIN			#PageIndex t2
ON			
		b.[ItemID] = t2.[ItemID]
		
LEFT OUTER JOIN		mp_Users u
ON			b.UserGuid = u.UserGuid
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex




GO

ALTER PROCEDURE [dbo].[mp_Blogs_GetCountByCategory]

/*
Author:   			Joe Audette
Created: 			2012-04-13
Last Modified: 		2012-11-10
*/

@ModuleID int,
@CategoryID		int,
@CurrentTime datetime

AS

SELECT COUNT(*) 
FROM [dbo].[mp_Blogs]
WHERE
(ModuleID = @ModuleID)  
    			and IsPublished = 1
    			and StartDate <= @CurrentTime
    			AND (EndDate IS NULL OR EndDate > @CurrentTime)
    			AND ItemID IN (SELECT ItemID FROM mp_BlogItemCategories WHERE CategoryID = @CategoryID)



GO


ALTER PROCEDURE [dbo].[mp_Blog_SelectPageByMonth]

-- Author:   			Joe Audette
-- Created: 			2012-04-13
-- Last Modified: 		2012-11-10

@Month int,
@Year int,
@ModuleID int,
@CurrentDate datetime,
@PageNumber int,
@PageSize int


AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
	ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentDate
		AND (EndDate IS NULL OR EndDate > @CurrentDate)
		AND Month(StartDate)  = @Month 
		AND Year(StartDate)  = @Year


ORDER BY	 StartDate DESC

END

SELECT
		b.BlogGuid,
			b.ModuleGuid,
			b.ItemID, 
			b.ModuleID, 
			b.CreatedByUser, 
			b.CreatedDate, 
			b.Heading, 
			b.SubTitle,
			b.[Abstract], 
			b.[Description], 
			b.StartDate,
			b.IsInNewsletter, 
			b.IncludeInFeed,
			b.AllowCommentsForDays,
			b.MetaKeywords,
			b.MetaDescription,
			b.Location,
			b.UserGuid,
			b.LastModUserGuid,
			b.LastModUtc,
			b.ItemUrl,
			CONVERT(nvarchar(20), b.CommentCount) AS CommentCount,
			COALESCE(u.UserID, -1) AS UserID,
			u.[Name],
			u.FirstName,
			u.LastName,
			u.[LoginName],
			u.Email,
			u.AvatarUrl,
			u.AuthorBio
		
FROM
		[dbo].[mp_Blogs] b

JOIN			#PageIndex t2
ON			
		b.[ItemID] = t2.[ItemID]
		
LEFT OUTER JOIN		mp_Users u
ON			b.UserGuid = u.UserGuid
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex




GO

ALTER PROCEDURE [dbo].[mp_Blog_SelectPageByMonthPersian]

-- Author:   			Joe Audette
-- Created: 			2012-04-13
-- Last Modified: 		2012-11-10

@Month int,
@Year int,
@ModuleID int,
@CurrentDate datetime,
@PageNumber int,
@PageSize int


AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
	ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentDate
		AND (EndDate IS NULL OR EndDate > @CurrentDate)
		AND [dbo].PersianMonth(StartDate)  = @Month 
		AND [dbo].PersianYear(StartDate)  = @Year


ORDER BY	 StartDate DESC

END

SELECT
		b.BlogGuid,
			b.ModuleGuid,
			b.ItemID, 
			b.ModuleID, 
			b.CreatedByUser, 
			b.CreatedDate, 
			b.Heading, 
			b.SubTitle,
			b.[Abstract], 
			b.[Description], 
			b.StartDate,
			b.IsInNewsletter, 
			b.IncludeInFeed,
			b.AllowCommentsForDays,
			b.MetaKeywords,
			b.MetaDescription,
			b.Location,
			b.UserGuid,
			b.LastModUserGuid,
			b.LastModUtc,
			b.ItemUrl,
			CONVERT(nvarchar(20), b.CommentCount) AS CommentCount,
			u.[Name],
			u.[LoginName],
			u.Email
		
FROM
		[dbo].[mp_Blogs] b

JOIN			#PageIndex t2
ON			
		b.[ItemID] = t2.[ItemID]
		
LEFT OUTER JOIN		mp_Users u
ON			b.UserGuid = u.UserGuid
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex



GO

ALTER PROCEDURE [dbo].[mp_Blogs_GetCountByMonth]

/*
Author:   			Joe Audette
Created: 			2012-04-13
Last Modified: 		2012-11-10
*/

@Month int,
@Year int,
@ModuleID int,
@CurrentDate datetime

AS

SELECT COUNT(*) 
FROM [dbo].[mp_Blogs]
WHERE
ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentDate
		AND (EndDate IS NULL OR EndDate > @CurrentDate)
		AND Month(StartDate)  = @Month 
		AND Year(StartDate)  = @Year



GO

ALTER PROCEDURE [dbo].[mp_Blogs_GetCountByMonthPersian]

/*
Author:   			Joe Audette
Created: 			2012-04-13
Last Modified: 		2012-11-10
*/

@Month int,
@Year int,
@ModuleID int,
@CurrentDate datetime

AS

SELECT COUNT(*) 
FROM [dbo].[mp_Blogs]
WHERE
ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentDate
		AND (EndDate IS NULL OR EndDate > @CurrentDate)
		AND dbo.PersianMonth(StartDate)  = @Month 
		AND dbo.PersianYear(StartDate)  = @Year



GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectPage]

-- Author:   			Joe Audette
-- Created: 			2010-01-05
-- Last Modified: 		2012-11-10

@ModuleID int,
@BeginDate datetime,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
(ModuleID = @ModuleID)  
    			and (@BeginDate >= StartDate)
    			and IsPublished = 1
    			and StartDate <= @CurrentTime
    			AND (EndDate IS NULL OR EndDate > @CurrentTime)

ORDER BY

	StartDate DESC

END


SELECT
		b.BlogGuid,
			b.ModuleGuid,
			b.ItemID, 
			b.ModuleID, 
			b.CreatedByUser, 
			b.CreatedDate, 
			b.Heading, 
			b.SubTitle,
			b.[Abstract], 
			b.[Description], 
			b.StartDate,
			b.IsInNewsletter, 
			b.IncludeInFeed,
			b.AllowCommentsForDays,
			b.MetaKeywords,
			b.MetaDescription,
			b.Location,
			b.UserGuid,
			b.LastModUserGuid,
			b.LastModUtc,
			b.ItemUrl,
			CONVERT(nvarchar(20), b.CommentCount) AS CommentCount,
			COALESCE(u.UserID, -1) AS UserID,
			u.[Name],
			u.[LoginName],
			u.FirstName,
			u.LastName,
			u.Email,
			u.AvatarUrl,
			u.AuthorBio
		
FROM
		[dbo].[mp_Blogs] b

JOIN			#PageIndex t2
ON			
		b.[ItemID] = t2.[ItemID]
		
LEFT OUTER JOIN		mp_Users u
ON			b.UserGuid = u.UserGuid
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex



GO

ALTER PROCEDURE [dbo].[mp_Blogs_GetCount]

/*
Author:   			Joe Audette
Created: 			2010-01-05
Last Modified: 		2012-11-10
*/

@ModuleID int,
@BeginDate datetime,
@CurrentTime datetime

AS

SELECT COUNT(*) 
FROM [dbo].[mp_Blogs]
WHERE
(ModuleID = @ModuleID)  
    			and (@BeginDate >= StartDate)
    			and IsPublished = 1
    			and StartDate <= @CurrentTime
    			AND (EndDate IS NULL OR EndDate > @CurrentTime)


GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectCategoriesForPage]

-- Author:   			Joe Audette
-- Created: 			2012-01-12
-- Last Modified: 		2012-11-10

@ModuleID int,
@BeginDate datetime,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
(ModuleID = @ModuleID)  
    			and (@BeginDate >= StartDate)
    			and IsPublished = 1
    			and StartDate <= @CurrentTime
    			AND (EndDate IS NULL OR EndDate > @CurrentTime)

ORDER BY

	StartDate DESC

END


SELECT
		bic.[ID],
		bic.[ItemID],
		bic.[CategoryID],
		bc.Category
		
FROM
		[dbo].[mp_BlogItemCategories] bic

JOIN		mp_BlogCategories bc
ON		bc.CategoryID = bic.CategoryID

JOIN			#PageIndex t2
ON			
		bic.[ItemID] = t2.[ItemID]
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID, bc.Category

DROP TABLE #PageIndex



GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectCategoriesForPageByCategory]

-- Author:   			Joe Audette
-- Created: 			2012-04-13
-- Last Modified: 		2012-11-10

@ModuleID int,
@CategoryID		int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
(ModuleID = @ModuleID)  
    			and IsPublished = 1
    			and StartDate <= @CurrentTime
    			AND (EndDate IS NULL OR EndDate > @CurrentTime)
    			AND ItemID IN (SELECT ItemID FROM mp_BlogItemCategories WHERE CategoryID = @CategoryID)

ORDER BY

	StartDate DESC

END


SELECT
		bic.[ID],
		bic.[ItemID],
		bic.[CategoryID],
		bc.Category
		
FROM
		[dbo].[mp_BlogItemCategories] bic

JOIN		mp_BlogCategories bc
ON		bc.CategoryID = bic.CategoryID

JOIN			#PageIndex t2
ON			
		bic.[ItemID] = t2.[ItemID]
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID, bc.Category

DROP TABLE #PageIndex




GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectCategoriesForPageByMonth]

-- Author:   			Joe Audette
-- Created: 			2012-04-15
-- Last Modified: 		2012-11-10

@Month int,
@Year int,
@ModuleID int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentTime
		AND (EndDate IS NULL OR EndDate > @CurrentTime)
		AND Month(StartDate)  = @Month 
		AND Year(StartDate)  = @Year

ORDER BY

	StartDate DESC

END


SELECT
		bic.[ID],
		bic.[ItemID],
		bic.[CategoryID],
		bc.Category
		
FROM
		[dbo].[mp_BlogItemCategories] bic

JOIN		mp_BlogCategories bc
ON		bc.CategoryID = bic.CategoryID

JOIN			#PageIndex t2
ON			
		bic.[ItemID] = t2.[ItemID]
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID, bc.Category

DROP TABLE #PageIndex




GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectCategoriesForPageByMonthPersian]

-- Author:   			Joe Audette
-- Created: 			2012-04-15
-- Last Modified: 		2012-11-10

@Month int,
@Year int,
@ModuleID int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentTime
		AND (EndDate IS NULL OR EndDate > @CurrentTime)
		AND [dbo].PersianMonth(StartDate)  = @Month 
		AND [dbo].PersianYear(StartDate)  = @Year

ORDER BY

	StartDate DESC

END


SELECT
		bic.[ID],
		bic.[ItemID],
		bic.[CategoryID],
		bc.Category
		
FROM
		[dbo].[mp_BlogItemCategories] bic

JOIN		mp_BlogCategories bc
ON		bc.CategoryID = bic.CategoryID

JOIN			#PageIndex t2
ON			
		bic.[ItemID] = t2.[ItemID]
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID, bc.Category

DROP TABLE #PageIndex




GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectAttachmentsForPage]

-- Author:   			Joe Audette
-- Created: 			2012-09-17
-- Last Modified: 		2012-11-10

@ModuleID int,
@BeginDate datetime,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
BlogGuid uniqueidentifier
)

BEGIN

INSERT INTO #PageIndex ( 
BlogGuid
)

SELECT
		BlogGuid
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
(ModuleID = @ModuleID)  
    			and (@BeginDate >= StartDate)
    			and IsPublished = 1
    			and StartDate <= @CurrentTime
    			AND (EndDate IS NULL OR EndDate > @CurrentTime)

ORDER BY

	StartDate DESC

END


SELECT  *
		
FROM
		[dbo].[mp_FileAttachment] bic



JOIN			#PageIndex t2
ON			
		bic.[ItemGuid] = t2.BlogGuid
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex




GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectAttachmentsForPageByCategory]

-- Author:   			Joe Audette
-- Created: 			2012-09-17
-- Last Modified: 		2012-11-10

@ModuleID int,
@CategoryID		int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
BlogGuid uniqueidentifier
)

BEGIN

INSERT INTO #PageIndex ( 
BlogGuid
)

SELECT
		BlogGuid
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
(ModuleID = @ModuleID)  
    			and IsPublished = 1
    			and StartDate <= @CurrentTime
    			AND (EndDate IS NULL OR EndDate > @CurrentTime)
    			AND ItemID IN (SELECT ItemID FROM mp_BlogItemCategories WHERE CategoryID = @CategoryID)

ORDER BY

	StartDate DESC

END


SELECT
		bic.*
		
FROM
		[dbo].[mp_FileAttachment] bic



JOIN			#PageIndex t2
ON			
		bic.[ItemGuid] = t2.[BlogGuid]
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex





GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectAttachmentsForPageByMonth]

-- Author:   			Joe Audette
-- Created: 			2012-09-17
-- Last Modified: 		2012-11-10

@Month int,
@Year int,
@ModuleID int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
BlogGuid uniqueidentifier
)

BEGIN

INSERT INTO #PageIndex ( 
BlogGuid
)

SELECT
		BlogGuid
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentTime
		AND (EndDate IS NULL OR EndDate > @CurrentTime)
		AND Month(StartDate)  = @Month 
		AND Year(StartDate)  = @Year

ORDER BY

	StartDate DESC

END


SELECT
		bic.*
		
FROM
		[dbo].[mp_FileAttachment] bic


JOIN			#PageIndex t2
ON			
		bic.[ItemGuid] = t2.[BlogGuid]
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex





GO

ALTER PROCEDURE [dbo].[mp_Blogs_SelectAttachmentsForPageByMonthPersian]

-- Author:   			Joe Audette
-- Created: 			2012-09-17
-- Last Modified: 		2012-11-10

@Month int,
@Year int,
@ModuleID int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
BlogGuid uniqueidentifier
)

BEGIN

INSERT INTO #PageIndex ( 
BlogGuid
)

SELECT
		BlogGuid
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
ModuleID = @ModuleID
		AND IsPublished = 1
		AND StartDate <= @CurrentTime
		AND (EndDate IS NULL OR EndDate > @CurrentTime)
		AND [dbo].PersianMonth(StartDate)  = @Month 
		AND [dbo].PersianYear(StartDate)  = @Year

ORDER BY

	StartDate DESC

END


SELECT
		bic.*
		
FROM
		[dbo].[mp_FileAttachment] bic



JOIN			#PageIndex t2
ON			
		bic.[ItemGuid] = t2.[BlogGuid]
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex





GO

ALTER PROCEDURE [dbo].[mp_Blog_SelectForFeed]

/*
Author:			Joe Audette
Created:		2012-01-14
Last Modified:	2012-11-10

*/
    
@ModuleID int,
@BeginDate datetime,
@CurrentTime datetime

AS
DECLARE @RowsToGet int

SET @RowsToGet = COALESCE((SELECT TOP 1 SettingValue FROM mp_ModuleSettings WHERE SettingName = 'MaxFeedItems' AND ModuleID = @ModuleID),20)

SET rowcount @RowsToGet

SELECT		
			b.BlogGuid,
			b.ModuleGuid,
			b.ItemID, 
			b.ModuleID, 
			b.CreatedByUser, 
			b.CreatedDate, 
			b.Heading, 
			b.SubTitle,
			b.[Abstract], 
			b.[Description], 
			b.StartDate,
			b.IsInNewsletter, 
			b.IsPublished,
			b.IncludeInFeed,
			b.AllowCommentsForDays,
			b.MetaKeywords,
			b.MetaDescription,
			b.Location,
			b.UserGuid,
			b.LastModUserGuid,
			b.LastModUtc,
			b.ItemUrl,
			CONVERT(nvarchar(20), b.CommentCount) AS CommentCount,
			u.[Name],
			u.[LoginName],
			u.Email
			

FROM        		mp_Blogs b

LEFT OUTER JOIN		mp_Users u
ON			b.UserGuid = u.UserGuid

WHERE
    			(b.ModuleID = @ModuleID)  
    			and (@BeginDate >= b.StartDate)
    			and b.IsPublished = 1
    			and b.StartDate <= @CurrentTime
    			AND (b.EndDate IS NULL OR b.EndDate > @CurrentTime)

ORDER BY
   			b.StartDate DESC




GO

ALTER PROCEDURE [dbo].[mp_Blog_SelectOne]

/*
Author:			Joe Audette
Last Modified:	2012-11-10

*/

    
@ItemID int,
@CurrentTime datetime

AS

SELECT		b.*,
			p.ItemUrl AS PreviousPost,
			p.Heading AS PreviousPostTitle, 
			COALESCE(p.ItemID, -1) AS PreviousItemID,
			n.ItemUrl AS NextPost,
			n.Heading AS NextPostTitle,
			COALESCE(n.ItemID, -1) AS NextItemID,
			COALESCE(u.UserID, -1) AS UserID,
			u.[Name],
			u.[LoginName],
			u.FirstName,
			u.LastName,
			u.Email,
			u.AvatarUrl,
			u.AuthorBio
			
			
FROM			mp_Blogs b

LEFT OUTER JOIN	mp_Blogs p
ON p.ItemID <> b.ItemID
AND p.ItemID IN
(SELECT TOP 1 ItemID 
FROM mp_Blogs
WHERE ModuleID = b.ModuleID AND IsPublished = 1
AND StartDate <= @CurrentTime
AND (EndDate IS NULL OR EndDate > @CurrentTime)
AND StartDate < b.StartDate
ORDER BY StartDate DESC)

LEFT OUTER JOIN	mp_Blogs n
ON n.ItemID <> b.ItemID
AND n.ItemID IN
(SELECT TOP 1 ItemID 
FROM mp_Blogs
WHERE ModuleID = b.ModuleID AND IsPublished = 1
AND StartDate <= @CurrentTime
AND (EndDate IS NULL OR EndDate > @CurrentTime)
AND StartDate > b.StartDate
ORDER BY StartDate)

LEFT OUTER JOIN		mp_Users u
ON			b.UserGuid = u.UserGuid


WHERE   		(b.ItemID = @ItemID)




GO

ALTER PROCEDURE [dbo].[mp_Blog_SelectForSiteMap]

/*
Author:		Joe Audette
Created:	2008-05-15
Last Modified:	2012-11-10

*/
    
@SiteID	int,
@CurrentUtcDateTime datetime

AS


SELECT		
			b.ItemUrl,
			b.LastModUtc
			

FROM        		[dbo].mp_Blogs b

JOIN		[dbo].mp_Modules m
ON			b.ModuleID = m.ModuleID

WHERE
				m.SiteID = @SiteID
    			AND b.StartDate <= @CurrentUtcDateTime
    			AND (b.EndDate IS NULL OR b.EndDate > @CurrentUtcDateTime)
    			AND b.IsPublished = 1
				AND b.IncludeInFeed = 1
				AND b.ItemUrl <> ''
				AND b.ItemUrl IS NOT NULL

ORDER BY
   			b.StartDate DESC


GO

ALTER PROCEDURE [dbo].[mp_Blog_SelectRelated]

/*
Author:			Joe Audette
Created:		2012-06-07
Last Modified:	2012-11-10

*/

    
@ItemID int,
@CurrentTime datetime

AS

SELECT TOP 20		b.*,
			u.[Name],
			u.[LoginName],
			u.Email
			
			
FROM			mp_Blogs b





LEFT OUTER JOIN		mp_Users u
ON			b.UserGuid = u.UserGuid


WHERE   		b.ItemID <> @ItemID
and b.StartDate <= @CurrentTime
AND (b.EndDate IS NULL OR b.EndDate > @CurrentTime)
AND b.ItemID IN 
(
SELECT ItemID
FROM mp_BlogItemCategories
WHERE CategoryID IN
(
SELECT CategoryID FROM mp_BlogItemCategories
WHERE ItemID = @ItemID
)
)

ORDER BY b.StartDate DESC




GO

CREATE PROCEDURE [dbo].[mp_Blogs_SelectClosed]

-- Author:   			Joe Audette
-- Created: 			2012-11-11
-- Last Modified: 		2012-11-11

@ModuleID int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
(ModuleID = @ModuleID)  
    			AND EndDate < @CurrentTime

ORDER BY

	StartDate DESC

END


SELECT
		b.BlogGuid,
			b.ModuleGuid,
			b.ItemID, 
			b.ModuleID, 
			b.CreatedByUser, 
			b.CreatedDate, 
			b.Heading, 
			b.SubTitle,
			b.[Abstract], 
			b.[Description], 
			b.StartDate,
			b.EndDate,
			b.IsInNewsletter, 
			b.IncludeInFeed,
			b.AllowCommentsForDays,
			b.MetaKeywords,
			b.MetaDescription,
			b.Location,
			b.UserGuid,
			b.LastModUserGuid,
			b.LastModUtc,
			b.ItemUrl,
			CONVERT(nvarchar(20), b.CommentCount) AS CommentCount,
			COALESCE(u.UserID, -1) AS UserID,
			u.[Name],
			u.[LoginName],
			u.FirstName,
			u.LastName,
			u.Email,
			u.AvatarUrl,
			u.AuthorBio
		
FROM
		[dbo].[mp_Blogs] b

JOIN			#PageIndex t2
ON			
		b.[ItemID] = t2.[ItemID]
		
LEFT OUTER JOIN		mp_Users u
ON			b.UserGuid = u.UserGuid
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex





GO

CREATE PROCEDURE [dbo].[mp_Blogs_GetCountClosed]

/*
Author:   			Joe Audette
Created: 			2012-11-11
Last Modified: 		2012-11-11
*/

@ModuleID int,
@CurrentTime datetime

AS

SELECT COUNT(*) 
FROM [dbo].[mp_Blogs]
WHERE
(ModuleID = @ModuleID)  
AND EndDate < @CurrentTime



GO

CREATE PROCEDURE [dbo].[mp_Blogs_SelectAttachmentsForClosed]

-- Author:   			Joe Audette
-- Created: 			2012-11-11
-- Last Modified: 		2012-11-11

@ModuleID int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
BlogGuid uniqueidentifier
)

BEGIN

INSERT INTO #PageIndex ( 
BlogGuid
)

SELECT
		BlogGuid
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
(ModuleID = @ModuleID)  		
AND EndDate < @CurrentTime

ORDER BY

	StartDate DESC

END


SELECT  *
		
FROM
		[dbo].[mp_FileAttachment] bic



JOIN			#PageIndex t2
ON			
		bic.[ItemGuid] = t2.BlogGuid
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID

DROP TABLE #PageIndex





GO

CREATE PROCEDURE [dbo].[mp_Blogs_SelectCategoriesForClosed]

-- Author:   			Joe Audette
-- Created: 			2012-11-11
-- Last Modified: 		2012-11-11

@ModuleID int,
@CurrentTime datetime,
@PageNumber int,
@PageSize int

AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int


SET @PageLowerBound = (@PageSize * @PageNumber) - @PageSize
SET @PageUpperBound = @PageLowerBound + @PageSize + 1



CREATE TABLE #PageIndex 
(
	IndexID int IDENTITY (1, 1) NOT NULL,
ItemID Int
)

BEGIN

INSERT INTO #PageIndex ( 
ItemID
)

SELECT
		[ItemID]
		
FROM
		[dbo].[mp_Blogs]
		
WHERE
(ModuleID = @ModuleID)  
AND EndDate < @CurrentTime

ORDER BY

	StartDate DESC

END


SELECT
		bic.[ID],
		bic.[ItemID],
		bic.[CategoryID],
		bc.Category
		
FROM
		[dbo].[mp_BlogItemCategories] bic

JOIN		mp_BlogCategories bc
ON		bc.CategoryID = bic.CategoryID

JOIN			#PageIndex t2
ON			
		bic.[ItemID] = t2.[ItemID]
		
		
WHERE
		t2.IndexID > @PageLowerBound 
		AND t2.IndexID < @PageUpperBound
		
ORDER BY t2.IndexID, bc.Category

DROP TABLE #PageIndex




GO

